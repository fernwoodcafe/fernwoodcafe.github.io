import{j as u,_ as d,v as c,C as h,h as r,g as n,x as f,E as v,o as m,l as P,L as g}from"./index.c3b7ad33.js";import{F as C}from"./AgGridComponent.vue_vue_type_style_index_0_lang.fa2b8661.39d83dec.a6d67679.57858042.68162d1f.2657f579.675c7fab.31a80f34.67f1413d.858b2485.js";import{h as i,M as o}from"./formatMoney.0cf77808.c83e9a63.80c3045c.ce30408e.25d20a91.206f1e3b.e397ac6b.6866ca48.7bd98579.2a17da16.js";var T=new Intl.NumberFormat("en-CA",{style:"percent"});const S=t=>isNaN(t)?"-":T.format(t),x=u({__name:"AgCheckboxEditor",props:{params:null},setup(t,{expose:a}){const p=d(t.params.value);return a({getValue:()=>p.value}),(l,s)=>c((r(),n("input",{type:"checkbox","onUpdate:modelValue":s[0]||(s[0]=e=>p.value=e)},null,512)),[[h,p.value]])}}),U=u({__name:"AgPercentEditor",props:{params:null},setup(t,{expose:a}){const p=d(t.params.value);return a({getValue:()=>p.value/100}),(l,s)=>c((r(),n("input",{type:"number","onUpdate:modelValue":s[0]||(s[0]=e=>p.value=e)},null,512)),[[f,p.value]])}}),_=.06,N=t=>{const a=t.hasPST?t.purchasePriceBeforeTax*(1+_):t.purchasePriceBeforeTax,p=t.purchaseQuantity*t.percentWaste,l=t.purchaseQuantity-p,s=a/l;return console.log("calculatePerUnitSupplyCost",JSON.stringify({hasPST:t.hasPST,purchasePriceBeforeTax:t.purchasePriceBeforeTax,costAfterPST:a,purchaseQuantity:t.purchaseQuantity,percentWaste:t.percentWaste,wasteQuantity:p,unwastedQuantity:l},void 0,2)),s},b=u({__name:"AgGridSuppliesComponent",props:{suppliesList:null},emits:["supplyUpdated","supplyDeleted"],setup(t,{emit:a}){const p=e=>a("supplyUpdated",e),l=e=>a("supplyDeleted",e),s=[{field:"supplyType",cellEditor:i,cellEditorParams:{options:["ingredient","packaging"].map(e=>({value:e,label:e}))}},{field:"supplyUnits",cellEditor:i,cellEditorParams:{options:["gram","litre","ounce","item"].map(e=>({value:e,label:e}))}},{field:"purchasePriceBeforeTax",headerName:"Purchase Price before Tax",valueFormatter:e=>o(e.value)},{field:"percentWaste",cellEditor:U,valueFormatter:e=>S(e.value)},{field:"hasPST",cellEditor:x},{field:"unitCost",headerName:"Unit Cost (Calculated)",editable:!1,valueGetter:({data:e})=>N(e),valueFormatter:e=>o(e.value)}];return(e,y)=>(r(),v(C,{gridData:t.suppliesList,gridColumns:["supplyName","supplyType","supplyUnits","purchaseQuantity","purchasePriceBeforeTax","percentWaste","hasPST","unitCost"],gridColumnDefs:s,onGridDataUpdate:p,onGridRowDelete:l},null,8,["gridData"]))}}),D=m("h1",null,"Supplies",-1),Q=u({__name:"SuppliesListView",props:{suppliesList:null,sendCommand:null},setup(t){const a=t,p=e=>a.sendCommand({type:"update_supply",payload:e}),l=e=>a.sendCommand({type:"delete_supply",payload:e}),s=()=>{a.sendCommand({type:"create_supply",payload:{uniqueId:crypto.randomUUID(),supplyUnits:"",supplyName:`New Supply ${a.suppliesList.items.length}`,supplyType:"ingredient",percentWaste:0,hasPST:!1,purchaseQuantity:0,purchasePriceBeforeTax:0}})};return(e,y)=>(r(),n(g,null,[D,m("button",{onClick:s},"New Supply"),P(b,{suppliesList:t.suppliesList,onSupplyUpdated:p,onSupplyDeleted:l},null,8,["suppliesList"])],64))}});export{Q as default};
